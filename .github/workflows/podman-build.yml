env:
  COMMON_MAVEN_ARGS: -e -B --settings .github/mvn-settings.xml --fail-at-end
  DB_NAME: hibernate_orm_test
  DB_PASSWORD: hibernate_orm_test
  DB_USER: hibernate_orm_test
  IS_PODMAN: 'true'
  JVM_TEST_MAVEN_ARGS: -Dtest-containers -Dstart-containers -Dformat.skip -DskipDocs
    -Dquarkus.test.hang-detection-timeout=60
  LANG: en_US.UTF-8
  NATIVE_TEST_MAVEN_ARGS: -Dtest-containers -Dstart-containers -Dquarkus.native.native-image-xmx=5g
    -Dnative -Dnative.surefire.skip -Dformat.skip -Dno-descriptor-tests install -DskipDocs
jobs:
  build-all-the-things:
    env:
      MAVEN_OPTS: -Xmx2g -XX:MaxMetaspaceSize=1g
    if: (github.repository == 'quarkusio/quarkus' || !endsWith(github.ref, '/main'))
      && ( github.event_name != 'pull_request' || ( github.event.pull_request.draft
      == false && github.event.pull_request.state != 'closed' && contains(github.event.pull_request.title,
      'wip ') == false && contains(github.event.pull_request.title, '[wip]') == false
      && ( github.event.action != 'edited' || contains(github.event.changes.title.from,
      'wip ') || contains(github.event.changes.title.from, '[wip]') ) ) )
    name: JDK 17 Build
    outputs:
      gib_args: ${{ steps.get-gib-args.outputs.gib_args }}
      gib_impacted: ${{ steps.get-gib-impacted.outputs.impacted_modules }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Add quarkusio remote
      run: git remote show quarkusio &> /dev/null || git remote add quarkusio https://github.com/quarkusio/quarkus.git
      shell: bash
    - continue-on-error: true
      if: '!startsWith(matrix.java.os-name, ''windows'') && !startsWith(matrix.java.os-name,
        ''macos'')'
      name: Reclaim Disk Space
      run: .github/ci-prerequisites.sh
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Setup docker host
      run: echo "DOCKER_HOST=unix:///run/user/$(id -u)/podman/podman.sock" >> "$GITHUB_ENV"
    - continue-on-error: true
      name: Update podman
      run: "sudo apt-get -y purge podman\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL\
        \ https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release\
        \ -rs)/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg\
        \ > /dev/null\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg]\
        \ \\\n  https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release\
        \ -rs)/ /\" \\\n  | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list\
        \ > /dev/null\nsudo apt-get update -qq\nsudo apt-get -qq -y install podman\n\
        sudo bash -c \"echo -e '[engine]\\nservice_timeout=0' >> /etc/containers/containers.conf\"\
        \n"
    - continue-on-error: true
      name: Check podman
      run: docker version
    - continue-on-error: true
      name: Set up testcontainers for podman
      run: 'echo ryuk.container.privileged=true > ~/.testcontainers.properties

        '
    - continue-on-error: true
      id: cache-maven
      name: Cache Maven Repository
      uses: actions/cache@v4
      with:
        key: q2maven-${{ steps.get-date.outputs.date }}
        path: ~/.m2/repository
    - continue-on-error: true
      name: Initial build
      run: './mvnw -T1C $COMMON_MAVEN_ARGS -DskipTests -DskipITs -DskipDocs -Dinvoker.skip
        -Dskip.gradle.tests -Djbang.skip -Dtruststore.skip -Dno-format -Dtcks -Prelocations
        clean install

        '
    - continue-on-error: true
      name: Verify extension dependencies
      run: ./update-extension-dependencies.sh $COMMON_MAVEN_ARGS
      shell: bash
    - continue-on-error: true
      env:
        PULL_REQUEST_BASE: ${{ github.event.pull_request.base.ref }}
      id: get-gib-args
      name: Get GIB arguments
      run: "# See also: https://github.com/gitflow-incremental-builder/gitflow-incremental-builder#configuration\
        \ (GIB)\n# Common GIB_ARGS for all CI cases (hint: see also root pom.xml):\n\
        # - disableSelectedProjectsHandling: required to detect changes in jobs that\
        \ use -pl\n# - untracked: to ignore files created by jobs (and uncommitted\
        \ to be consistent)\nGIB_ARGS=\"-Dincremental -Dgib.disableSelectedProjectsHandling\
        \ -Dgib.untracked=false -Dgib.uncommitted=false\"\nif [ -n \"$PULL_REQUEST_BASE\"\
        \ ]\nthen\n  # The PR defines a clear merge target so just use that branch\
        \ for reference, *unless*:\n  # - the current branch is a backport branch\
        \ targeting some released branch like 1.10 (merge target is not main)\n  GIB_ARGS+=\"\
        \ -Dgib.referenceBranch=origin/$PULL_REQUEST_BASE -Dgib.disableIfReferenceBranchMatches='origin/\\\
        d+\\.\\d+'\"\nelse\n  # No PR means the merge target is uncertain so fetch\
        \ & use main of quarkusio/quarkus, *unless*:\n  # - the current branch is\
        \ main or some released branch like 1.10\n  # - the current branch is a backport\
        \ branch which is going to target some released branch like 1.10 (merge target\
        \ is not main)\n  GIB_ARGS+=\" -Dgib.referenceBranch=refs/remotes/quarkusio/main\
        \ -Dgib.fetchReferenceBranch -Dgib.disableIfBranchMatches='main|\\d+\\.\\\
        d+|.*backport.*'\"\nfi\necho \"GIB_ARGS: $GIB_ARGS\"\necho \"gib_args=${GIB_ARGS}\"\
        \ >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      id: get-gib-impacted
      name: Get GIB impacted modules
      run: "./mvnw -q -T1C $COMMON_MAVEN_ARGS -Dtcks -Dquickly-ci ${{ steps.get-gib-args.outputs.gib_args\
        \ }} -Dgib.logImpactedTo=gib-impacted.log validate\nif [ -s gib-impacted.log\
        \ ]\nthen\n  GIB_IMPACTED=$(cat gib-impacted.log)\nelse\n  GIB_IMPACTED=''\n\
        fi\necho \"GIB_IMPACTED: ${GIB_IMPACTED}\"\n# three steps to retain linefeeds\
        \ in output for other jobs\n# (see https://github.com/github/docs/issues/21529\
        \ and https://github.com/orgs/community/discussions/26288#discussioncomment-3876281)\n\
        echo 'impacted_modules<<EOF' >> $GITHUB_OUTPUT\necho \"${GIB_IMPACTED}\" >>\
        \ $GITHUB_OUTPUT\necho 'EOF' >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      if: '!startsWith(matrix.java.os-name, ''windows'') && !startsWith(matrix.java.os-name,
        ''macos'')'
      name: Stop mysql
      run: 'ss -ln

        sudo service mysql stop || true

        '
      shell: bash
    - continue-on-error: true
      if: startsWith(matrix.java.os-name, 'windows')
      name: Support longpaths on Windows
      run: git config --global core.longpaths true
    - continue-on-error: true
      if: '!startsWith(matrix.java.os-name, ''windows'') && !startsWith(matrix.java.os-name,
        ''macos'')'
      name: apt clean
      run: sudo apt-get clean
      shell: bash
    - continue-on-error: true
      name: Build
      run: ./mvnw $COMMON_MAVEN_ARGS install -Dsurefire.timeout=1200 -pl !integration-tests/gradle
        -pl !integration-tests/maven -pl !integration-tests/devmode -pl !integration-tests/devtools
        -Dno-test-kubernetes -pl !docs $JVM_TEST_MAVEN_ARGS ${{ steps.get-gib-args.outputs.gib_args
        }}
      shell: bash
    - continue-on-error: true
      name: Delete Local Artifacts From Cache
      run: rm -r ~/.m2/repository/io/quarkus
      shell: bash
    - continue-on-error: true
      if: always()
      name: Clean Gradle temp directory
      run: devtools/gradle/gradlew --stop && rm -rf devtools/gradle/gradle-extension-plugin/build/tmp
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Prepare failure archive (if maven failed)
      run: find . -name '*-reports' -type d -o -name '*.log' | tar -czf test-reports.tgz
        -T -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload failure Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-jvm${{matrix.java.name}}
        path: test-reports.tgz
        retention-days: 5
    - continue-on-error: true
      if: ${{ failure() || cancelled() }}
      name: Upload build reports (if build failed)
      uses: actions/upload-artifact@v4
      with:
        name: build-reports-JVM Tests - JDK ${{matrix.java.name}}
        path: '**/target/*-reports/TEST-*.xml

          target/build-report.json

          LICENSE.txt

          '
        retention-days: 2
    - continue-on-error: true
      name: Upload gc.log
      uses: actions/upload-artifact@v4
      with:
        name: GC log - JDK ${{matrix.java.name}}
        path: '**/windows-java-11.txt

          !**/build/tmp/**

          '
        retention-days: 5
    - continue-on-error: true
      if: ${{ failure() || cancelled() }}
      name: Upload build.log (if build failed)
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-JVM Tests - JDK ${{matrix.java.name}}
        path: '**/build.log

          '
        retention-days: 2
name: Podman Test Build (Linux)
on:
  repository_dispatch:
    types: trigger-ga___podman-build.yml
